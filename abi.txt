このコンパイラの関数呼び出し規約：

整数レジスタはr0からr31のうち,
r0をゼロレジスタ,
r1をフレームレジスタ,
r2をヒープレジスタ,
r3からr29までの27個を汎用レジスタ,
r30を1固定レジスタ,
r31を-1固定レジスタとして使う。

浮動小数レジスタはf0からf31まですべてを一般レジスタとして使う。

メモリは,下の方(番地の小さい方)をヒープ領域,上の方をスタック領域として使う。
ヒープ領域はメモリの0番地から上に伸びていき(1度使った領域は再利用しない),スタック領域はメモリの一番上から下に伸びていく。
ヒープレジスタ,フレームレジスタはそれぞれの領域の先頭の番地を保持する。
ヒープ領域にデータを格納したら,その分だけヒープレジスタの値を増やす。

関数呼び出しの際,
呼び出し元では生きている変数をすべてスタックに退避させ,引数を,浮動小数以外はr3から,浮動小数はf0からそれぞれ順番に並べ,スタックの分だけフレームレジスタを進める。
続いて,クロージャを通じて呼び出す関数なら,r29にクロージャのアドレスを入れ,呼び出す関数のアドレスをクロージャから取り出し,そのアドレスにジャンプする。
クロージャを通じないで呼び出す関数なら,その関数のアドレスにジャンプする。
返り番地はセットする必要は無い。
関数の呼び出しから返ってきたらフレームレジスタを元に戻す。

呼び出された側では,クロージャを通じて呼び出された場合はr29にクロージャのアドレスが入っているので,そこから自由変数の値を取り出す。
そして,r3,r4,...及びf0,f1,...を引数として関数本体を実行する。レジスタの値を退避する必要は無い。
返り値は整数ならr3に,浮動小数ならf0に入れる。
最後にReturn命令を実行すると関数を呼び出したところに戻る。
